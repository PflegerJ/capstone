from keras.models import load_model
import numpy as np
import csv
import time
import pandas as pd

boss_ID = "101115"
STEPS = 60

loaded_model = load_model('models\\754_4_240.model')
#print(loaded_model.weights)

df = pd.read_csv(boss_ID + '_30.csv')
df = df.dropna()
NAME = boss_ID + f"-{int(time.time())}"


tag_df = df['0']

#print(tag_df)
#print(df.shape)
df.drop(columns=df.columns[0], axis=1, inplace=True)
df.drop(columns=df.columns[0], axis=1, inplace=True)
#df.drop(columns=df.columns[0], axis=1, inplace=True)
#df.drop('0', axis=1, inplace=True)
#df.drop('duration', inplace=True)
#df.drop('Unnamed', inplace=True)

#print(df.shape)
X = []

for i in range(df.shape[0]):
    dps = df.iloc[i][0:STEPS].values
    hps = df.iloc[i][STEPS:STEPS * 2].values
    dtps = df.iloc[i][STEPS * 2:].values


    temp_list = []
    temp_list.append(dps)
    temp_list.append(hps)
    temp_list.append(dtps)
    temp_list = np.array(temp_list).T
    #print(temp_list)
    X.append(temp_list)

X = np.array(X)


print(X.shape)
X = X.reshape(1637, 60, 3)
print(X.shape)
y = loaded_model.predict(X)
i = 0
correct = 0
wrong = 0
for tag in tag_df:
    if y[i][0] > y[i][1]:
        if tag == 0:
            print("correct")
            correct = correct + 1
        else:
            print("WRONG")
            wrong = wrong + 1
    else:
        if tag == 1:
            print("correct")
            correct = correct + 1
        else:
            print("WRONG")
            wrong = wrong + 1
    i = i + 1

print("Correct: " + str(correct) + " " + "Wrong: " + str(wrong))
a = 2
"""

#a = [29546.763698630137,37815.3698630137,45466.49657534247,53331.28767123288,62267.28424657535,72345.54109589041,82199.90753424658,90776.52054794521,97556.71232876713,103510.26712328767,110552.71575342467,119204.78082191781,124758.13356164384,130153.24657534248,137147.80821917808,144601.20547945207,148307.92465753425,154357.68493150684,157953.3390410959,164157.2876712329,171965.27397260276,178504.8698630137,181935.8184931507,177134.24657534246,177482.7089041096,179592.04109589042,180585.9828767123,179033.12328767122,176194.7705479452,177624.59589041097,177689.80479452055,174032.06849315067,167376.47602739724,161613.9109589041,165615.9965753425,169947.8904109589,167379.4828767123,163724.13698630137,163191.51369863012,161986.31506849316,167126.5479452055,164215.11643835614,163691.99657534246,165415.8904109589,166244.89726027398,168448.56164383562,162374.19863013696,158471.3424657534,160918.0479452055,165393.0410958904,164613.8595890411,167576.01369863015,164490.40753424657,162711.43835616438,161876.61301369863,160582.1506849315,158002.3698630137,157916.53424657535,158511.30479452055,160524.4383561644,1990.5376712328766,2154.958904109589,2577.246575342466,3130.753424657534,3445.0582191780823,3653.8698630136987,3695.541095890411,4056.0,4460.089041095891,4754.876712328767,4964.904109589042,5162.986301369863,5156.092465753424,5441.815068493152,5450.01712328767,5109.109589041096,5303.506849315068,6977.301369863015,7250.5993150684935,6945.999999999999,6479.945205479451,6100.4178082191775,5987.345890410959,5065.246575342465,4478.9006849315065,3981.4794520547935,3725.8732876712334,3864.534246575341,3394.0890410958887,1622.8150684931475,1022.1232876712328,984.0,958.2431506849314,853.917808219178,571.6506849315058,510.20547945205476,501.0,501.0,406.6335616438347,0.0,0.0,0.0,233.59931506849455,477.0,477.0,477.0,477.0,477.0,1316.3835616438412,2707.965753424663,3769.9554794520586,5144.150684931508,6100.695205479456,6570.465753424658,6734.842465753425,6778.109589041096,6807.356164383562,6813.958904109589,6815.0,6815.0,802.0,802.0,1053.3424657534247,1425.2328767123288,1646.0,1646.0,2580.431506849316,2848.0,3362.982876712329,3994.2328767123286,3875.993150684932,4389.356164383562,5325.801369863015,5651.0,5907.592465753425,6378.191780821918,6691.051369863013,9664.760273972604,9426.527397260274,9073.0,8709.58219178082,8032.876712328768,8315.143835616438,7376.191780821917,6390.458904109588,5950.0,5764.671232876711,5236.301369863012,4771.633561643834,1995.7328767123236,1134.9280821917807,1137.0,1111.4794520547944,1007.8561643835617,724.763698630136,663.2054794520548,993.8082191780841,1286.0,1182.40410958904,735.917808219178,730.9657534246575,730.0,915.6061643835628,1109.0,1109.0,1109.0,1109.0,1109.0,1183.66095890411,1278.0,1349.3835616438375,1986.5479452054797,2050.0,2203.493150684932,2251.866438356164,2147.0,2147.3561643835615,2153.958904109589,2155.0,2155.0]

a = [1200.0,2132.0,2132.0,3147.3132530120483,3161.0,4434.0,4434.0,3651.0,3651.0,3383.0,3314.1385542168673,3312.0,1025.94578313253,1041.0,1838.0,1838.0,2284.024096385542,2330.0,3977.885542168675,4034.0,4438.451807228916,7121.325301204821,7285.0,7761.469879518073,7865.0,9629.734939759037,9946.0,11097.867469879518,10876.0,7779.180722891566,8163.0,8063.421686746988,7739.2530120481915,7721.0,6320.777108433733,6436.0,6275.493975903616,6032.0,7436.30722891566,8198.0,10174.210843373494,10247.819277108434,10241.0,11467.614457831325,11524.0,8523.253012048193,8088.0,5757.1325301204815,5546.0,7448.807228915663,7287.0,6912.433734939759,6898.0662650602435,6921.0,10315.915662650605,10212.0,12338.126506024088,13066.0,14487.704819277107,14931.0,139.0,627.1807228915663,664.0,551.7951807228915,525.0,835.0,835.0,747.1325301204818,692.0,310.0,447.72289156626505,452.0,142.0,142.0,605.0,605.0,980.078313253013,1156.0,1014.0,1014.0,1464.3433734939758,1301.0,1301.0,836.3012048192767,750.0,1356.0,1356.0,656.3132530120482,606.0,606.0,606.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1222.7289156626464,1403.0,1509.927710843373,1545.0,1893.0,1893.0,0.0,1410.0,1410.0,2403.698795180723,2641.0,2641.0,2641.0,1774.6144578313238,1231.0,2506.0,3273.174698795181,3297.0,6562.078313253012,6818.0,9663.192771084337,10117.0,11507.030120481933,12757.0,10413.27108433735,11250.0,13227.463855421687,13524.710843373494,13402.0,11249.192771084334,10636.0,10063.566265060239,9554.0,4029.987951807229,2080.0,2006.3493975903614,2001.0,2006.0,2006.0,2006.0,2006.0,2006.0,2309.0,2309.0,1372.0,1372.0,1372.0,1372.0,1372.0,1019.0,1019.0,1813.879518072289,2034.0,2034.0,2034.0,2423.012048192771,2006.0,2006.0,1059.2710843373443,1005.0,2182.265060240959,2391.0,1407.0,1407.0,1407.0,1407.0]

n  = np.array(a)
dps = a[0:60]
hps = a[60:120]
dtps = a[120:]
temp_list = []
temp_list.append(dps)
temp_list.append(hps)
temp_list.append(dtps)
temp_list = np.array(temp_list).T
#print(temp_list)
temp_list = temp_list.reshape(1, 60, 3)
print(temp_list.shape)
y = loaded_model.predict(temp_list)
print(y)
"""